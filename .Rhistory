muglamap2 = ggmap(muglamap1)
muglamap2
set.seed(1234)
lon <- runif (40, 27.50, 29)
lat <- runif (40, 36.5, 37.5)
earthquake = rnorm (40, 3, 2)
for (i in 1:length(earthquake))
{
if (earthquake[i]<0) {earthquake[i] = 0}
else{earthquake[i] = earthquake[i]}
}
myd <- data.frame (lon, lat, earthquake)
library(grid)
muglamap1 +   geom_point(aes(x = lon, y = lat,
colour = earthquake,
size = earthquake), data = myd)
packages = c("rvest","ggmap","dplyr")
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
url <- read_html("http://www.wiki-zero.com/index.php?q=aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGlzdF9vZl9jb3VudHJpZXNfYnlfdW5lbXBsb3ltZW50X3JhdGU")
html_data <- data.frame(html_table(url)[1])
html_data <- html_data[,c(1,2)]
colnames(html_data) <- c("Country","UnemplPerc")
html_data <- html_data[!is.na(as.numeric(as.character(html_data[,2]))),]
html_data$UnemplPerc <- round(as.numeric(html_data$UnemplPerc),1)
html_data <- html_data[order(html_data[2]),]
world_map <- map_data("world")
world_map <- left_join(world_map, html_data,
by = c('region' = 'Country'))
ggplot(data = world_map) +
geom_polygon(aes(x = long, y = lat,
fill = UnemplPerc,
group = group),
color = "green")
load("/Users/ZFED/Downloads/crime.rda")
us <- c(left = -125, bottom = 25.75, right = -67, top = 49)
map <- get_stamenmap(us, zoom = 5, maptype = "toner-lite")
ggmap(map)
library(dplyr)
violent_crimes <- filter(crime, offense != "auto theft",
offense != "theft",
offense != "burglary"
)
violent_crimes$offense <- factor(
violent_crimes$offense,levels =
c("robbery", "aggravated assault", "rape", "murder")
)
violent_crimes <- filter(violent_crimes,
-95.39681 <= lon & lon <= -95.34188,
29.73631 <= lat & lat <=  29.78400
)
qmplot(lon, lat, data = violent_crimes,
maptype = "toner-lite",
color = I("red"))
qmplot(lon, lat, data = violent_crimes,
maptype = "toner-lite",
color = offense)
qmplot(lon, lat, data = violent_crimes,
maptype = "toner-background",
color = offense) +
facet_wrap(~ offense)
europe <- c(left = -12, bottom = 35, right = 30, top = 63)
get_stamenmap(europe, zoom = 5, maptype = "toner-lite") %>% ggmap()
get_googlemap("istanbul", zoom = 12) %>% ggmap()
get_googlemap("mugla", zoom = 10) %>% ggmap()
get_googlemap("mugla", zoom = 10) %>% ggmap()
get_googlemap("izmir", zoom = 12,
maptype = "satellite") %>% ggmap()
get_googlemap("istanbul", zoom = 12,
maptype = "roadmap") %>% ggmap()
get_googlemap("istanbul", zoom = 12) %>% ggmap()
get_googlemap("istanbul", zoom = 12) %>% ggmap()
get_googlemap("mugla", zoom = 10) %>% ggmap()
get_googlemap("izmir", zoom = 12,
maptype = "satellite") %>% ggmap()
get_googlemap("mugla", zoom = 10) %>% ggmap()
get_googlemap("istanbul", zoom = 12,
maptype = "hybrid") %>% ggmap()
get_googlemap("istanbul", zoom = 12,
maptype = "hybrid") %>% ggmap()
geocode("Mugla Sitki Kocman Universitesi Mugla Turkey")
geocode("MIT Media Lab, Cambridge")
revgeocode(c(lon = 28.37272, lat = 37.17807))
world_map <- map_data("world")
world_map <- left_join(world_map, html_data,
by = c('region' = 'Country'))
ggplot(data = world_map) +
geom_polygon(aes(x = long, y = lat,
fill = UnemplPerc,
group = group),
color = "green")
muglamap1 = get_map(location = c(lon = 28.2, lat = 37),
zoom = 9, maptype = 'roadmap', source = "google")
muglamap1 = ggmap(muglamap1)
muglamap1
get_map(location = c(lon = 28.2, lat = 37),
zoom = 9, maptype = 'roadmap', source = "google")
get_map(location = c(lon = 28.2, lat = 37),
zoom = 9, maptype = 'roadmap', source = "google")
muglamap1
library(grid)
muglamap1 +   geom_point(aes(x = lon, y = lat,
colour = earthquake,
size = earthquake), data = myd)
earthquake
myd
geocode(mugla)
geocode("MIT Media Lab, Cambridge")
geocode("mugla")
geocode(us)
geocode("us")
??get_stamenmap
View(crime)
??crime
?? crime data
??crime data
??crime
wd()
setwd('/Users/ZFED/Dropbox/OutbreakDetector_esra')
load("/Users/ZFED/Dropbox/OutbreakDetector_esra/count_1")
View(count_1)
write.csv(count_1, file = "count_1.csv",row.names=FALSE, na="")
View(count_1)
View(count_1)
getwd()
# This script is just to call the data
#setwd('/Users/ZFED/Dropbox/RESIDUAL CUSUM for RESPIRATORY DATA/R')
setwd('/Users/ZFED/Dropbox/OutbreakDetector_ozan')
#######
# resp_table_child<- read.csv("resp_child_07_14.csv", header=TRUE)
# data <- resp_table_child[,c(1,2,22)]
data <- read.csv("OutbreakDetector_sampledata.csv")
data <- data[,-4]
#######
colnames(data) <- c("Date","Number","Holiday")
colnames(data) <- c("Date","numberofpatients","Holiday")
colnames(data) <- c("Date","Number","holiday")
###########################################################################################
###########################################################################################
######################
library(RecordLinkage)
#######################
#########################################################################################
# here we put a selection of most common column names that users use.
#The first element of each vector should be the best name that
# we suggest users to use and  which our code is based on.
#for example "Retention Time" and "Full Width at Half Maximum" which are the first element
# of each vector in the list, are our suggestion so we wrote them in the fisrt place.
best_colnames <- list(
c("Date","date"),
c("number","Number","number of patients","NumberofPatients","numberofpatients","Number_of_patients","number_of_patients","Number_of_Patients"),
c("Holiday", "holiday")
)
#### camelCaseSplit function ##############################################################################################
camelCaseSplit <- function(x) {
# This function get a camelCase word and splits it.
# Ex : camelCaseSplit("myComputerIsHere") ---> my Computer Is Here
return(gsub("([a-z])([A-Z])", "\\1 \\L\\2", x, perl = TRUE))
}
#### punc_remove function #################################################################################################
punc_remove <- function(x){
# This function removes any existing punctuation in your sentence or word
#and transfer it to space.
# Ex1: punc_remove("Best.RT") --> "Best RT"     #Ex2: punc_remove("Best_RT") --> "Best RT"
return(gsub("[[:punct:]///' ]", " ", x))
}
#### clearString function ###############################################################################################
clearString <- function(x){
# This function, gets a word or setence, Splits it (if it is a camelCase),
#removes any existing punctuations, and transfer
# all Upper Case letters to lower case letters.
# Ex: clearString("myName_isJohn.black") --> my name is john black
return(tolower(punc_remove(camelCaseSplit(x))))
}
#### guessColumnName function ###########################################################################################
# This function receives the data and check the column names of data and changes
#the column names if it is not the
# same names as our suggested sample data to fit our suggested sample data
guessColumnName <- function(x){
a <- clearString(x)
max_index <- 0
max <- -1
for(i in seq_along(best_colnames)){
col <- best_colnames[[i]]
for(j in seq_along(col)){
sim <- levenshteinSim(a,clearString(col[j]))
if(sim > max){
max <- sim
max_index <- i
}
}
}
if (max > 0.6) {
return(best_colnames[[max_index]][1])
}
else {
return(x)
}
}
#
##
###
#################################################################################################
input.sanity.check <- function(data, finalfile) {
error_message <- ""
# get the column names and convert them into the column names as in required format
#(For ecample we want Date but a user might use Dat, this function
#ex:auotomatically change Dat to Date)
colnames(data) <- unlist(lapply(colnames(data), function(x)guessColumnName(x)))
############## conditions ##############
required_column_names <- c("Date","Number")
provided_column_names <- colnames(data)
if(all(required_column_names %in% provided_column_names)==FALSE) {
missedInput <- which(!(required_column_names %in% provided_column_names))
error_message <- paste("ERROR : The required input(inputs) : ",
paste(required_column_names[missedInput], collapse = ", "),
" is(are) not provided in data set. Please add it to your
data and try again.\n\n")
}
if(error_message != "") {
return(paste(error_message))
}
if(!("Holiday" %in% colnames(data))) {
data[,"Holiday"] <- NA
error_message <- paste("ERROR : The optional input, holiday is not provided in data set.
You can get better results if you add it to your data and try again.\n\n")
}
if(error_message != "") {
return(paste(error_message))
}
data[,"Holiday"] <- factor(data[,"Holiday"])
# date column should be saved as date format.
#-------------------------
# Check that all columns are in required format
# 1. Start with "date" column. All the values of date column should be in date format)
if(!is.Date(data[,"Date"])) {
data[,"Date"] <- as.Date(parse_date_time(x = data[,"Date"],
orders = c("%d-%b-%y", "%d %b %Y", "%d-%m-%Y", "%m/%d/%y", "%d.%m.%y", "%d.%m.%Y")))
error_message <- paste(error_message, "All the values of date column should be in date format.\n\n")
}
if(error_message != "") {
return(paste(error_message))
}
# 2. Check the "Number" column. All the values of that column should be in numeric format)
if(is.numeric(data[ , "Number"]) == FALSE) {
error_message <- paste(error_message, "All the values of Number column should be numeric and positive.\n\n")
}
if(error_message != "") {
return(paste(error_message))
}
# 3. Check the "holiday" column. All the values of that column should be in numeric format)
if(!all(data[,"Holiday"] %in% c(0,1))) {
error_message <- paste(error_message, "All the values of holiday column should be 0 for non-holidays and 1 for holidays.\n\n")
}
if(error_message != "") {
return(paste(error_message))
}
# for custom metrics we are checking them to be numeric in QCMetrics in
# "find_custom_metrics" function and only accepting numeric columns after Annotation
# if there is any missing value in data replace it with NA
data[data==""] <- NA
print("Your data is ready to go!")
return(data)
}
input.sanity.check(data)
# get the column names and convert them into the column names as in required format
#(For ecample we want Date but a user might use Dat, this function
#ex:auotomatically change Dat to Date)
colnames(data) <- unlist(lapply(colnames(data), function(x)guessColumnName(x)))
required_column_names <- c("Date","Number")
provided_column_names <- colnames(data)
if(all(required_column_names %in% provided_column_names)==FALSE) {
missedInput <- which(!(required_column_names %in% provided_column_names))
error_message <- paste("ERROR : The required input(inputs) : ",
paste(required_column_names[missedInput], collapse = ", "),
" is(are) not provided in data set. Please add it to your
data and try again.\n\n")
}
if(error_message != "") {
return(paste(error_message))
}
if(!("Holiday" %in% colnames(data))) {
data[,"Holiday"] <- NA
error_message <- paste("ERROR : The optional input, holiday is not provided in data set.
You can get better results if you add it to your data and try again.\n\n")
}
if(error_message != "") {
return(paste(error_message))
}
data[,"Holiday"] <- factor(data[,"Holiday"])
#-------------------------
# Check that all columns are in required format
# 1. Start with "date" column. All the values of date column should be in date format)
if(!is.Date(data[,"Date"])) {
data[,"Date"] <- as.Date(parse_date_time(x = data[,"Date"],
orders = c("%d-%b-%y", "%d %b %Y", "%d-%m-%Y", "%m/%d/%y", "%d.%m.%y", "%d.%m.%Y")))
error_message <- paste(error_message, "All the values of date column should be in date format.\n\n")
}
if(error_message != "") {
return(paste(error_message))
}
# 2. Check the "Number" column. All the values of that column should be in numeric format)
if(is.numeric(data[ , "Number"]) == FALSE) {
error_message <- paste(error_message, "All the values of Number column should be numeric and positive.\n\n")
}
if(error_message != "") {
return(paste(error_message))
}
# 3. Check the "holiday" column. All the values of that column should be in numeric format)
if(!all(data[,"Holiday"] %in% c(0,1))) {
error_message <- paste(error_message, "All the values of holiday column should be 0 for non-holidays and 1 for holidays.\n\n")
}
if(error_message != "") {
return(paste(error_message))
}
# if there is any missing value in data replace it with NA
data[data==""] <- NA
print("Your data is ready to go!")
return(data)
#################################################################################################
input.sanity.check <- function(data, finalfile) {
error_message <- ""
# get the column names and convert them into the column names as in required format
#(For ecample we want Date but a user might use Dat, this function
#ex:auotomatically change Dat to Date)
colnames(data) <- unlist(lapply(colnames(data), function(x)guessColumnName(x)))
############## conditions ##############
required_column_names <- c("Date","Number")
provided_column_names <- colnames(data)
if(all(required_column_names %in% provided_column_names)==FALSE) {
missedInput <- which(!(required_column_names %in% provided_column_names))
error_message <- paste("ERROR : The required input(inputs) : ",
paste(required_column_names[missedInput], collapse = ", "),
" is(are) not provided in data set. Please add it to your
data and try again.\n\n")
}
if(error_message != "") {
return(paste(error_message))
}
if(!("Holiday" %in% colnames(data))) {
data[,"Holiday"] <- NA
error_message <- paste("ERROR : The optional input, holiday is not provided in data set.
You can get better results if you add it to your data and try again.\n\n")
}
if(error_message != "") {
return(paste(error_message))
}
data[,"Holiday"] <- factor(data[,"Holiday"])
# date column should be saved as date format.
#-------------------------
# Check that all columns are in required format
# 1. Start with "date" column. All the values of date column should be in date format)
if(!is.Date(data[,"Date"])) {
data[,"Date"] <- as.Date(parse_date_time(x = data[,"Date"],
orders = c("%d-%b-%y", "%d %b %Y", "%d-%m-%Y", "%m/%d/%y", "%d.%m.%y", "%d.%m.%Y")))
error_message <- paste(error_message, "All the values of date column should be in date format.\n\n")
}
if(error_message != "") {
return(paste(error_message))
}
# 2. Check the "Number" column. All the values of that column should be in numeric format)
if(is.numeric(data[ , "Number"]) == FALSE) {
error_message <- paste(error_message, "All the values of Number column should be numeric and positive.\n\n")
}
if(error_message != "") {
return(paste(error_message))
}
# 3. Check the "holiday" column. All the values of that column should be in numeric format)
if(!all(data[,"Holiday"] %in% c(0,1))) {
error_message <- paste(error_message, "All the values of holiday column should be 0 for non-holidays and 1 for holidays.\n\n")
}
if(error_message != "") {
return(paste(error_message))
}
# for custom metrics we are checking them to be numeric in QCMetrics in
# "find_custom_metrics" function and only accepting numeric columns after Annotation
# if there is any missing value in data replace it with NA
data[data==""] <- NA
print("Your data is ready to go!")
return(data)
}
input.sanity.check(data)
if(error_message != "") {
return(paste(error_message))
}
data[,"Holiday"] <- factor(data[,"Holiday"])
View(data)
setwd("C:/Users/ozank/Desktop/outbreak_ozan")
library(shiny)
library(DT)
library(lubridate)
library(ggplot2)
data <- data.frame()
val_data <- data.frame()
ui <- fluidPage(
fluidPage(
titlePanel("Uploading Files"),
sidebarLayout(
sidebarPanel(
fileInput('file1', 'Choose CSV File',
accept=c('text/csv',
'text/comma-separated-values,text/plain',
'.csv')),
tags$hr(),
checkboxInput('header', 'Header', TRUE),
radioButtons('sep', 'Separator',
c(Comma=',',
Semicolon=';',
Tab='\t'),
','),
radioButtons('quote', 'Quote',
c(None='',
'Double Quote'='"',
'Single Quote'="'"),
'"'),
actionButton("data_validation", label = "Validate the Data")
),
mainPanel(
tabsetPanel(type = "tabs",
id = "upperTabSet",
tabPanel("Data", dataTableOutput('contents')),
tabPanel("Validated Data", dataTableOutput('table')),
tabPanel("Summary", verbatimTextOutput("summary")),
tabPanel("Arima", tabsetPanel(type = "tabs",
id = "innerTabSet",
tabPanel("Arima",
fluidRow(
column(4,numericInput('NumYearsTrain', 'Number of Years to train', 1,
min = 1, max = 9)),
column(4,selectInput('win_slide', 'Sliding Window (day)', c( "7",
"14",
"21"), selectize=FALSE)),
column(4,selectInput('Cusum_Parameters', 'Cusum Parameters', c( "Aggresive",
"Moderate",
"Routine"), selectize=FALSE))),
actionButton("run_arima", label = "Run Arima"),
fluidRow(
column(6,h2("Cusum Results")),
column(6,h2("Time Series Summary"))
),
fluidRow(
column(6,verbatimTextOutput("cusum_summary")),
column(6,verbatimTextOutput("ts_summary")))),
tabPanel("Arima Data", dataTableOutput('arima_data')),
tabPanel("Residual Plot", plotOutput('arima_summary')),
#tabPanel("Cusum Summary", verbatimTextOutput('cusum_summary')),
tabPanel("Final Plots",
dataTableOutput('arima_plot'))
))
)
)
)
)
)
server <- function(input, output, session) {
#----------------------------------------------------------------------------
getData <- reactive({
inFile <- input$file1
if (is.null(input$file1))
return(NULL)
data <<- read.csv(inFile$datapath, header=input$header, sep=input$sep,
quote=input$quote)
})
output$contents <- renderDataTable(getData(),
options = list(
searching = FALSE,
pageLength = 15))
#output$contents <- renderTable(getData())
#-----------------------------------------------------------
getSummary <- reactive({
inFile <- input$file1
if (is.null(input$file1))
return(NULL)
summary(read.csv(inFile$datapath, header=input$header, sep=input$sep,
quote=input$quote))
})
output$summary <- renderPrint(
getSummary()
)
#-------------------------------------------------------------------------
observeEvent(input$data_validation, {
data <<- data[,-4]
colnames(data) <<- c("Date","Number","Holiday")
source('Data_validation.R')
val_data <<- input.date.check(input.date.check(data))
#output$table <- renderText({input.sanity.check(val_data)})
#output$table <- renderDataTable(data[1])
output$table <- renderDataTable(val_data,
options = list(
pageLength = 15,
searching = FALSE)
)
})
#-------------------------------------------------------------------------
observeEvent(input$run_arima, {
source('03_arima_yardimci_ozan.R')
results <<- arima_run(val_data,input$NumYearsTrain,input$win_slide,input$Cusum_Parameters)
output$arima_summary <- renderPlot(ggtsdisplay(residuals(results[[2]], type="normalized"), main="ARIMA errors"))
output$cusum_summary <- renderPrint(summary(results[[3]]))
output$ts_summary <- renderPrint(summary(results[[4]]))
output$arima_data <- renderDataTable(results[[1]],
options = list(
pageLength = 10,
searching = FALSE)
)
})
}
shinyApp(ui, server)
